name: Develop Pull Request Check
on:
  pull_request:
    branches: develop
    types: [opened, synchronize, reopened]
jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core 6.0 SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.x'
      - name: Install dependencies
        run: dotnet restore ./TicketSystem/TicketSystem.API/TicketSystem.API.csproj
      - name: Build
        run: dotnet build ./TicketSystem/TicketSystem.API/TicketSystem.API.csproj --configuration Release --no-restore
  # build:
  #   name: Build
  #   runs-on: windows-latest
  #   steps:
  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 1.11
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: Cache SonarQube packages
  #       uses: actions/cache@v1
  #       with:
  #         path: ~\sonar\cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar
  #     - name: Cache SonarQube scanner
  #       id: cache-sonar-scanner
  #       uses: actions/cache@v1
  #       with:
  #         path: .\.sonar\scanner
  #         key: ${{ runner.os }}-sonar-scanner
  #         restore-keys: ${{ runner.os }}-sonar-scanner
  #     - name: Install SonarQube scanner
  #       if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
  #       shell: powershell
  #       run: |
  #         New-Item -Path .\.sonar\scanner -ItemType Directory
  #         dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
  #     - name: Build and analyze
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #       shell: powershell
  #       run: |
  #         .\.sonar\scanner\dotnet-sonarscanner begin /k:"TicketSystem.API" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
  #         dotnet build "./TicketSystem/TicketSystem.API/TicketSystem.API.csproj"
  #         .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  #     - name: SonarQube Quality Gate check
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #       with:
  #         scanMetadataReportFile: .sonarqube/out/.sonar/report-task.txt
  #       timeout-minutes: 5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


